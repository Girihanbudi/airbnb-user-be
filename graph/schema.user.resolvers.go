package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"airbnb-user-be/graph/model"
	"airbnb-user-be/internal/app/middleware/auth"
	module "airbnb-user-be/internal/app/user"
	"context"

	"github.com/thoas/go-funk"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	if err := auth.GqlValidateAccessToken(ctx); err != nil {
		return nil, err
	}

	data, err := r.Resolver.User.Me(ctx)
	if err != nil {
		return nil, err
	}

	var user model.User
	user.FirstName = data.FirstName
	user.FullName = data.FullName
	user.Email = data.Email
	user.CountryCode = data.CountryCode
	user.PhoneNumber = data.PhoneNumber
	user.Image = data.Image
	user.Role = data.Role
	user.DateOfBirth = data.DateOfBirth
	user.CreatedAt = data.CreatedAt
	user.UpdatedAt = data.UpdatedAt
	user.VerifiedAt = data.VerifiedAt

	userDefaultSetting := data.DefaultSetting
	if userDefaultSetting != nil {
		resDefaultSetting := model.UserDefaultSetting{
			Locale:   userDefaultSetting.Locale,
			Currency: userDefaultSetting.Currency,
		}
		user.DefaultSetting = &resDefaultSetting
	}

	if user.Accounts != nil {
		user.Accounts = funk.Map(*data.Accounts, func(acc module.Account) model.Account {
			return model.Account{
				Provider:     acc.Provider,
				AccessToken:  acc.AccessToken,
				RefreshToken: acc.RefreshToken,
				ExpiredAt:    acc.ExpiredAt,
				TokenType:    acc.TokenType,
				CreatedAt:    acc.CreatedAt,
				UpdatedAt:    acc.UpdatedAt,
			}
		}).([]*model.Account)
	}

	return &user, nil
}
