// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"airbnb-user-be/internal/app/locale/api/gql"
	repoimpl2 "airbnb-user-be/internal/app/locale/repo/repoimpl"
	"airbnb-user-be/internal/app/locale/usecase/usecaseimpl"
	"airbnb-user-be/internal/app/translation/repo/repoimpl"
	"airbnb-user-be/internal/pkg/env"
	"airbnb-user-be/internal/pkg/gorm"
	"airbnb-user-be/internal/pkg/http/server"
	"airbnb-user-be/internal/pkg/http/server/router"
	"github.com/google/wire"
)

import (
	_ "airbnb-user-be/docs"
)

// Injectors from wire.go:

func ProvideApp() (*App, error) {
	envConfig := env.ProvideDefaultEnvConf()
	config := env.ProvideEnv(envConfig)
	serverConfig := env.ExtractServerConfig(config)
	engine := router.ProvideRouter()
	options := server.Options{
		Config: serverConfig,
		Router: engine,
	}
	serverServer := server.ProvideServer(options)
	gormConfig := env.ExtractDBConfig(config)
	gormEngine := gorm.ProvideORM(gormConfig)
	repoimplOptions := repoimpl.Options{
		Gorm: gormEngine,
	}
	repo := repoimpl.NewErrTranslationRepo(repoimplOptions)
	options2 := repoimpl2.Options{
		Gorm: gormEngine,
	}
	repoimplRepo := repoimpl2.NewLocaleRepo(options2)
	usecaseimplOptions := usecaseimpl.Options{
		LocaleRepo: repoimplRepo,
	}
	usecase := usecaseimpl.NewLocaleUsecase(usecaseimplOptions)
	gqlOptions := gql.Options{
		Locale: usecase,
	}
	handler := gql.ProvideLocaleHandler(gqlOptions)
	appOptions := Options{
		HttpServer:       serverServer,
		Translation:      repo,
		LocaleGqlHandler: handler,
	}
	app := &App{
		Options: appOptions,
	}
	return app, nil
}

// wire.go:

var AppSet = wire.NewSet(wire.Struct(new(Options), "*"), wire.Struct(new(App), "*"))
