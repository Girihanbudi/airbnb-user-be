// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"airbnb-user-be/internal/app/auth/api/rest"
	"airbnb-user-be/internal/app/auth/usecase/usecaseimpl"
	gql2 "airbnb-user-be/internal/app/currency/api/gql"
	repoimpl4 "airbnb-user-be/internal/app/currency/repo/repoimpl"
	usecaseimpl3 "airbnb-user-be/internal/app/currency/usecase/usecaseimpl"
	"airbnb-user-be/internal/app/locale/api/gql"
	repoimpl3 "airbnb-user-be/internal/app/locale/repo/repoimpl"
	usecaseimpl2 "airbnb-user-be/internal/app/locale/usecase/usecaseimpl"
	"airbnb-user-be/internal/app/translation/repo/repoimpl"
	repoimpl2 "airbnb-user-be/internal/app/user/repo/repoimpl"
	"airbnb-user-be/internal/pkg/env"
	"airbnb-user-be/internal/pkg/env/tool"
	"airbnb-user-be/internal/pkg/gorm"
	"airbnb-user-be/internal/pkg/http/server"
	"airbnb-user-be/internal/pkg/http/server/router"
	"airbnb-user-be/internal/pkg/oauth/google"
	"github.com/google/wire"
)

import (
	_ "airbnb-user-be/docs"
)

// Injectors from wire.go:

func NewApp() (*App, error) {
	config := env.ProvideEnv()
	configConfig := tool.ExtractServerConfig(config)
	engine := router.NewRouter()
	options := server.Options{
		Config: configConfig,
		Router: engine,
	}
	serverServer := server.NewServer(options)
	config2 := tool.ExtractDBConfig(config)
	gormEngine := gorm.NewORM(config2)
	repoimplOptions := repoimpl.Options{
		Gorm: gormEngine,
	}
	repo := repoimpl.NewErrTranslationRepo(repoimplOptions)
	config3 := tool.ExtractOauthGoogleConfig(config)
	oauth := google.NewGoogleOauth(config3)
	options2 := repoimpl2.Options{
		Gorm: gormEngine,
	}
	repoimplRepo := repoimpl2.NewUserRepo(options2)
	options3 := repoimpl3.Options{
		Gorm: gormEngine,
	}
	repo2 := repoimpl3.NewLocaleRepo(options3)
	usecaseimplOptions := usecaseimpl.Options{
		GoogleOauth: oauth,
		UserRepo:    repoimplRepo,
		LocaleRepo:  repo2,
	}
	usecase := usecaseimpl.NewAuthUsecase(usecaseimplOptions)
	restOptions := rest.Options{
		Router: engine,
		Auth:   usecase,
	}
	handler := rest.NewAuthHandler(restOptions)
	options4 := usecaseimpl2.Options{
		LocaleRepo: repo2,
	}
	usecaseimplUsecase := usecaseimpl2.NewLocaleUsecase(options4)
	gqlOptions := gql.Options{
		Locale: usecaseimplUsecase,
	}
	gqlHandler := gql.NewLocaleHandler(gqlOptions)
	options5 := repoimpl4.Options{
		Gorm: gormEngine,
	}
	repo3 := repoimpl4.NewCurrencyRepo(options5)
	options6 := usecaseimpl3.Options{
		CurrencyRepo: repo3,
	}
	usecase2 := usecaseimpl3.NewCurrencyUsecase(options6)
	options7 := gql2.Options{
		Currency: usecase2,
	}
	handler2 := gql2.NewCurrencyHandler(options7)
	appOptions := Options{
		HttpServer:         serverServer,
		Translation:        repo,
		AuthHandler:        handler,
		LocaleGqlHandler:   gqlHandler,
		CurrencyGqlHandler: handler2,
	}
	app := &App{
		Options: appOptions,
	}
	return app, nil
}

// wire.go:

var AppSet = wire.NewSet(wire.Struct(new(Options), "*"), wire.Struct(new(App), "*"))
