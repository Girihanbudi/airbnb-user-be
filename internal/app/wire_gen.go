// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"airbnb-user-be/internal/app/auth/api/rest"
	usecaseimpl2 "airbnb-user-be/internal/app/auth/usecase/usecaseimpl"
	"airbnb-user-be/internal/app/country/api/gql"
	repoimpl2 "airbnb-user-be/internal/app/country/repo/repoimpl"
	"airbnb-user-be/internal/app/country/usecase/usecaseimpl"
	gql3 "airbnb-user-be/internal/app/currency/api/gql"
	repoimpl5 "airbnb-user-be/internal/app/currency/repo/repoimpl"
	usecaseimpl4 "airbnb-user-be/internal/app/currency/usecase/usecaseimpl"
	gql2 "airbnb-user-be/internal/app/locale/api/gql"
	repoimpl4 "airbnb-user-be/internal/app/locale/repo/repoimpl"
	usecaseimpl3 "airbnb-user-be/internal/app/locale/usecase/usecaseimpl"
	"airbnb-user-be/internal/app/translation/repo/repoimpl"
	repoimpl3 "airbnb-user-be/internal/app/user/repo/repoimpl"
	"airbnb-user-be/internal/pkg/env"
	"airbnb-user-be/internal/pkg/env/tool"
	"airbnb-user-be/internal/pkg/gorm"
	"airbnb-user-be/internal/pkg/http/server"
	"airbnb-user-be/internal/pkg/http/server/router"
	"airbnb-user-be/internal/pkg/oauth/facebook"
	"airbnb-user-be/internal/pkg/oauth/google"
	"github.com/google/wire"
)

import (
	_ "airbnb-user-be/docs"
)

// Injectors from wire.go:

func NewApp() (*App, error) {
	config := env.ProvideEnv()
	configConfig := tool.ExtractServerConfig(config)
	engine := router.NewRouter()
	options := server.Options{
		Config: configConfig,
		Router: engine,
	}
	serverServer := server.NewServer(options)
	config2 := tool.ExtractDBConfig(config)
	gormEngine := gorm.NewORM(config2)
	repoimplOptions := repoimpl.Options{
		Gorm: gormEngine,
	}
	repo := repoimpl.NewErrTranslationRepo(repoimplOptions)
	options2 := repoimpl2.Options{
		Gorm: gormEngine,
	}
	repoimplRepo := repoimpl2.NewCountryRepo(options2)
	usecaseimplOptions := usecaseimpl.Options{
		CountryRepo: repoimplRepo,
	}
	usecase := usecaseimpl.NewCountryUsecase(usecaseimplOptions)
	gqlOptions := gql.Options{
		Country: usecase,
	}
	handler := gql.NewCountryHandler(gqlOptions)
	config3 := tool.ExtractOauthGoogleConfig(config)
	oauth := google.NewGoogleOauth(config3)
	config4 := tool.ExtractOauthFacebookConfig(config)
	facebookOauth := facebook.NewFacebookOauth(config4)
	options3 := repoimpl3.Options{
		Gorm: gormEngine,
	}
	repo2 := repoimpl3.NewUserRepo(options3)
	options4 := repoimpl4.Options{
		Gorm: gormEngine,
	}
	repo3 := repoimpl4.NewLocaleRepo(options4)
	options5 := usecaseimpl2.Options{
		GoogleOauth:   oauth,
		FacebookOauth: facebookOauth,
		UserRepo:      repo2,
		LocaleRepo:    repo3,
	}
	usecaseimplUsecase := usecaseimpl2.NewAuthUsecase(options5)
	restOptions := rest.Options{
		Router: engine,
		Auth:   usecaseimplUsecase,
	}
	restHandler := rest.NewAuthHandler(restOptions)
	options6 := usecaseimpl3.Options{
		LocaleRepo: repo3,
	}
	usecase2 := usecaseimpl3.NewLocaleUsecase(options6)
	options7 := gql2.Options{
		Locale: usecase2,
	}
	gqlHandler := gql2.NewLocaleHandler(options7)
	options8 := repoimpl5.Options{
		Gorm: gormEngine,
	}
	repo4 := repoimpl5.NewCurrencyRepo(options8)
	options9 := usecaseimpl4.Options{
		CurrencyRepo: repo4,
	}
	usecase3 := usecaseimpl4.NewCurrencyUsecase(options9)
	options10 := gql3.Options{
		Currency: usecase3,
	}
	handler2 := gql3.NewCurrencyHandler(options10)
	appOptions := Options{
		HttpServer:         serverServer,
		Translation:        repo,
		CountryHandler:     handler,
		AuthHandler:        restHandler,
		LocaleGqlHandler:   gqlHandler,
		CurrencyGqlHandler: handler2,
	}
	app := &App{
		Options: appOptions,
	}
	return app, nil
}

// wire.go:

var AppSet = wire.NewSet(wire.Struct(new(Options), "*"), wire.Struct(new(App), "*"))
